@use 'sass:map';
@use 'sass:math';
@use 'utils';
@use 'base/ionic';
@use 'base/typography';
@use 'base/line-clamp';
@use 'base/link';
@use 'base/html-list';

@use 'components/grid';

:root,
:host {
  --kirby-font-family: 'Roboto';

  font-family: var(--kirby-font-family);
  @each $color, $color-name in utils.$kirby-colors {
    --kirby-#{$color}: #{$color-name};
  }
  @each $color, $color-name in utils.$text-colors {
    --kirby-text-color-#{$color}: #{$color-name};
  }

  --kirby-page-max-width: 1366px;
  --kirby-statusbar-padding: var(--ion-statusbar-padding);
  --kirby-safe-area-top: var(--ion-safe-area-top);
  --kirby-safe-area-right: var(--ion-safe-area-right);
  --kirby-safe-area-bottom: var(--ion-safe-area-bottom);
  --kirby-safe-area-left: var(--ion-safe-area-left);
  --kirby-tab-bar-height: 50px;

  // Prevent iOS tap highlight:
  -webkit-tap-highlight-color: transparent;
}

@function get-drawer-additional-padding-top() {
  $modal-close-button-inner-height: utils.size('l'); // Todo: Move to / get from shared var
  $modal-close-button-vertical-margin: utils.size('xxxs') * 2; // Todo: Move to / get from shared var
  $modal-header-vertical-padding: 3px * 2; // 3px defined by Ionic
  $modal-header-total-height: $modal-close-button-inner-height + $modal-close-button-vertical-margin +
    $modal-header-vertical-padding;
  $modal-header-vertical-center: math.round($modal-header-total-height * 0.5);
  @return $modal-header-vertical-center;
}

body.allow-background-scroll {
  overflow: initial !important;
}

ion-modal::part(backdrop) {
  --backdrop-opacity: 0.4;
}

ion-modal.kirby-overlay {
  position: fixed;

  &.kirby-modal {
    box-sizing: border-box;

    --background: var(--kirby-modal-background, #{utils.get-color('background-color')});
    --border-radius: 0;
    --height: auto;
    --box-shadow: #{utils.get-elevation(4)};

    &.kirby-modal-compact {
      --border-radius: #{utils.$border-radius};
      --max-width: #{utils.$compact-modal-max-width};

      text-align: center;
    }

    &.kirby-drawer {
      --min-height: #{utils.$drawer-default-height};
      --kirby-modal-padding-top: calc(var(--kirby-safe-area-top, 0px) + #{utils.size('m')});
      --border-radius: #{utils.$border-radius} #{utils.$border-radius} 0px 0px;

      padding-top: var(--kirby-modal-padding-top);
      align-items: flex-end;

      &.interact-with-background {
        &.kirby-modal.kirby-drawer {
          --kirby-modal-padding-top: 0;
        }
      }
    }

    @include utils.media('<medium') {
      &:not(.kirby-drawer):not(.kirby-modal-compact) {
        --height: 100%;
      }
    }

    &:not(.kirby-modal-compact).kirby-modal-full-height {
      --height: 100%;
    }

    &.modal-card:not(.kirby-drawer) {
      @include utils.media('<medium') {
        --height: 100%;
      }
    }

    @include utils.media('>=medium') {
      --width: #{utils.$modal-max-width};
      --border-radius: #{utils.$border-radius};

      &:not(.kirby-modal-compact) {
        --max-height: 100%;
        --kirby-modal-padding-top-base: #{utils.size('xl')};
        --kirby-modal-padding-top: var(--kirby-modal-padding-top-base);

        padding-top: var(--kirby-modal-padding-top);

        &:not(.kirby-drawer) {
          --min-height: #{utils.$modal-default-height};

          align-items: flex-start;

          &.kirby-modal-small {
            --min-height: #{map.get(utils.$modal-heights, 's')};
          }

          &.kirby-modal-medium {
            --min-height: #{map.get(utils.$modal-heights, 'm')};
          }

          &.kirby-modal-large {
            --min-height: #{map.get(utils.$modal-heights, 'l')};
          }

          &.kirby-modal-full-height::part(content),
          &.full-height::part(content) {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
          }
        }
      }

      &.kirby-drawer {
        --kirby-modal-padding-top: calc(
          var(--kirby-modal-padding-top-base) + #{get-drawer-additional-padding-top()}
        );
      }
    }
  }

  &.kirby-action-sheet {
    --background: transparent;
    --width: 100%;
    --height: 100%;
    --box-shadow: none;

    &::part(content) {
      pointer-events: none;
    }
  }

  &.kirby-alert {
    --background: #{utils.get-color('background-color')};
    --border-radius: #{utils.$border-radius};
    --box-shadow: #{utils.get-elevation(4)};
    --max-width: #{utils.$alert-max-width};
    --height: auto;
  }
}

ion-modal {
  --background: var(--kirby-modal-background, #{utils.get-color('background-color')});
}

ion-loading.kirby-loading-overlay {
  --backdrop-opacity: #{utils.$loading-overlay-backdrop-opacity};
  --ion-backdrop-color: #{utils.get-color('background-color')};

  .loading-wrapper {
    --background: transparent;
  }

  &.kirby-loading-hide-content {
    --backdrop-opacity: 1;
  }
}

.kirby-toast {
  position: fixed;
  user-select: none;
  text-align: center;

  // Set default colors
  --background: #{utils.get-color('success')};
  --color: #{utils.get-color('success-contrast')};
  --button-color: #{utils.get-color('success-contrast')};

  @each $color-name, $color-value in utils.$notification-colors {
    &.#{$color-name} {
      --background: #{utils.get-color($color-name)};
      --color: #{utils.get-color($color-name + '-contrast')};
      --button-color: #{utils.get-color($color-name + '-contrast')};
    }
  }
}

/*
 * FAB-sheet backdrop
*/
.fab-sheet-active {
  .tabs-inner,
  ion-router-outlet,
  .ion-page {
    overflow: visible;
    contain: none !important;
  }

  ion-tab-bar {
    z-index: -1;
  }
}

/*
 * Class to add link-icon to the right of e.g. anchor tag.
 */
.kirby-external-icon {
  $icon-scaling-factor: 1.5em;

  white-space: nowrap;
  background-image: url('/assets/kirby/icons/svg/link.svg');
  background-repeat: no-repeat;
  background-position: right 50%;
  background-size: $icon-scaling-factor;

  // Place icon to the right of text, with icons own width + the actual spacing
  padding-right: calc(#{$icon-scaling-factor} + #{utils.size('xxxs')});
}

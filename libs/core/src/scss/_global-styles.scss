@use 'sass:map';
@use 'sass:math';
@use 'utils';
@use 'base/ionic';
@use 'base/typography';
@use 'base/line-clamp';
@use 'base/link';
@use 'base/html-list';
@use 'base/html-table';

@use 'components/grid';
@use 'themes/component-themes';

/*
 * Modal variables
 *
 * height & width variables are kept local here until we have determined the exact values  
 * and can migrate them to heights/widths in _variables.scss, as a breaking change 
 * to either the existing modal heights or the modal-v2 maps.
 */

$modal-widths: (
  s: 408px,
  m: 636px,
  l: 888px,
);
$modal-heights: (
  s: 540px,
  m: 565px,
  l: 754px,
);
$modal-border-radius: utils.size('l');
$modal-gutter: #{utils.size('xxl')};
$modal-header-height: 88px;
$modal-expected-footer-height: 88px;
$modal-min-content-height: 88px;
$modal-large-screen-min-height: $modal-header-height + $modal-expected-footer-height +
  $modal-min-content-height;

@mixin bottom-drawer() {
  --border-radius: #{$modal-border-radius} #{$modal-border-radius} 0px 0px;
  --min-height: #{utils.$drawer-default-height};

  align-items: flex-end;
}

:root,
:host {
  @include component-themes.apply-light-theme;

  --kirby-font-family: 'Roboto';

  font-family: var(--kirby-font-family);
  @each $color, $color-name in utils.$kirby-colors {
    --kirby-#{$color}: #{$color-name};
  }
  @each $color, $color-name in utils.$text-colors {
    --kirby-text-color-#{$color}: #{$color-name};
  }
  @each $color, $color-ramp in utils.$decoration-colors {
    @each $shade, $color-value in $color-ramp {
      --kirby-decoration-color-#{$color}-#{$shade}: #{$color-value};
    }
  }

  --kirby-page-max-width: 1366px;
  --kirby-statusbar-padding: var(--ion-statusbar-padding);
  --kirby-safe-area-top: var(--ion-safe-area-top);
  --kirby-safe-area-right: var(--ion-safe-area-right);
  --kirby-safe-area-bottom: var(--ion-safe-area-bottom);
  --kirby-safe-area-left: var(--ion-safe-area-left);
  --kirby-tab-bar-height: 50px;

  // Prevent iOS tap highlight:
  -webkit-tap-highlight-color: transparent;
}

@function get-drawer-additional-padding-top() {
  $modal-close-button-inner-height: utils.size('l'); // Todo: Move to / get from shared var
  $modal-close-button-vertical-margin: utils.size('xxxs') * 2; // Todo: Move to / get from shared var
  $modal-header-vertical-padding: 3px * 2; // 3px defined by Ionic
  $modal-header-total-height: $modal-close-button-inner-height + $modal-close-button-vertical-margin +
    $modal-header-vertical-padding;
  $modal-header-vertical-center: math.round($modal-header-total-height * 0.5);
  @return $modal-header-vertical-center;
}

body.allow-background-scroll {
  overflow: initial !important;
}

ion-modal::part(backdrop) {
  --backdrop-opacity: 0.4;
}

ion-modal.kirby-overlay {
  position: fixed;

  &.kirby-modal {
    --border-radius: 0;
    --background: var(--kirby-modal-background, #{utils.get-color('background-color')});
    --height: auto;
    --box-shadow: #{utils.get-elevation(4)};

    box-sizing: border-box;

    &.kirby-modal-compact {
      --max-width: #{utils.$compact-modal-max-width};
      --border-radius: #{$modal-border-radius};

      text-align: center;
    }

    &.kirby-drawer {
      @include utils.media('<medium') {
        @include bottom-drawer;

        --kirby-modal-padding-top: calc(var(--kirby-safe-area-top, 0px) + #{utils.size('m')});
      }

      &.interact-with-background {
        &.kirby-modal.kirby-drawer {
          @include bottom-drawer;

          --kirby-modal-padding-top: 0;
        }
      }

      padding-top: var(--kirby-modal-padding-top);
    }

    @include utils.media('<medium') {
      &:not(.kirby-drawer):not(.kirby-modal-compact) {
        --height: 100%;
      }
    }

    &.modal-card:not(.kirby-drawer) {
      @include utils.media('<medium') {
        --height: 100%;
      }
    }

    &:not(.kirby-modal-compact) {
      &.kirby-modal-full-height {
        --width: #{map.get($modal-widths, 'm')};
        --height: 100%;
      }

      @include utils.media('>=medium') {
        --border-radius: #{$modal-border-radius};
        --min-height: #{$modal-large-screen-min-height};
        --max-height: calc(100vh - #{$modal-gutter} * 2);
        --max-width: calc(100vw - #{$modal-gutter} * 2);

        &.kirby-modal-small {
          --width: #{map.get($modal-widths, 's')};
          --height: var(--kirby-modal-height, #{map.get($modal-heights, 's')});
        }

        &.kirby-modal-medium {
          --width: #{map.get($modal-widths, 'm')};
          --height: var(--kirby-modal-height, #{map.get($modal-heights, 'm')});
        }

        &.kirby-modal-large {
          --width: #{map.get($modal-widths, 'l')};
          --height: var(--kirby-modal-height, #{map.get($modal-heights, 'l')});
        }
      }
    }
  }

  &.kirby-action-sheet {
    --background: transparent;
    --width: 100%;
    --height: 100%;
    --box-shadow: none;

    &::part(content) {
      pointer-events: none;
    }
  }

  &.kirby-alert {
    --background: #{utils.get-color('background-color')};
    --border-radius: #{utils.$border-radius};
    --box-shadow: #{utils.get-elevation(4)};
    --max-width: #{utils.$alert-max-width};
    --height: auto;
  }
}

ion-modal {
  --background: var(--kirby-modal-background, #{utils.get-color('background-color')});
}

ion-loading.kirby-loading-overlay {
  --backdrop-opacity: #{utils.$loading-overlay-backdrop-opacity};
  --ion-backdrop-color: #{utils.get-color('background-color')};

  .loading-wrapper {
    --background: transparent;
  }

  &.kirby-loading-hide-content {
    --backdrop-opacity: 1;
  }
}

.kirby-toast {
  position: fixed;
  user-select: none;
  text-align: center;

  $_toast-notification-colors-map: (
    'success': (
      'green',
      40,
    ),
    'warning': (
      'yellow',
      40,
    ),
  );

  // Set default colors

  --background: #{utils.get-decoration-color(map.get($_toast-notification-colors-map, 'success') ...)};
  --color: #{utils.get-color('black')};
  --button-color: var(--color);

  @each $name, $variant_shade in $_toast-notification-colors-map {
    &.#{$name} {
      --background: #{utils.get-decoration-color($variant_shade...)};
    }
  }
}

/*
 * FAB-sheet backdrop
*/
.fab-sheet-active {
  .tabs-inner,
  ion-router-outlet,
  .ion-page {
    overflow: visible;
    contain: none !important;
  }

  ion-tab-bar {
    z-index: -1;
  }
}

/*
 * Modal V2.
 */
$modal-max-height-desktop: 928px;
$modal-max-width-desktop: 594px;

html.ios ion-modal.kirby-modal-v2 {
  --background: var(--kirby-modal-background, #{utils.get-color('background-color')});

  &.modal-sheet {
    --border-radius: #{$modal-border-radius};

    ion-header {
      &.modal-header {
        border-bottom: none;
      }
    }

    ion-toolbar {
      button {
        background-color: transparent;
      }
    }
  }

  @include utils.media('>=medium') {
    --border-radius: #{$modal-border-radius};
    --max-height: #{$modal-max-height-desktop};
    --min-height: #{$modal-max-width-desktop};

    &::part(content) {
      margin: 15px;
    }

    &.xxs {
      --width: #{map.get(utils.$modal-v2-widths, 'xxs')};
      --height: #{map.get(utils.$modal-v2-heights, 'xxs')};
    }

    &.xs {
      --width: #{map.get(utils.$modal-v2-widths, 'xs')};
      --height: #{map.get(utils.$modal-v2-heights, 'xs')};
    }

    &.sm {
      --width: #{map.get(utils.$modal-v2-widths, 's')};
      --height: #{map.get(utils.$modal-v2-heights, 's')};
    }

    &.md {
      --width: #{map.get(utils.$modal-v2-widths, 'm')};
      --height: #{map.get(utils.$modal-v2-heights, 'm')};
    }

    &.lg {
      --width: #{map.get(utils.$modal-v2-widths, 'l')};
      --height: #{map.get(utils.$modal-v2-heights, 'l')};
    }
  }

  ion-toolbar {
    padding-right: 0;
    padding-left: 0;
  }

  ion-title {
    font-size: utils.font-size('n');
    font-weight: utils.font-weight('bold');
  }

  .kirby-grid {
    display: flex;
  }
}

/* 
  * Class to add link-icon to the right of e.g. anchor tag.
  */
.kirby-external-icon {
  @include utils.trailing-icon;
}

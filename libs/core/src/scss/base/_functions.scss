@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:string";
@use "../themes/colors";
@use "variables";

@function _get-map-prop($map, $key) {
  @if map.has-key($map, $key) {
    @return map.get($map, $key);
  }

  @error 'Unknown key `#{$key}`.';
  @return null;
}

@function size($key: 'm') {
  $negative: string.index($key, '-') == 1;
  @if ($negative) {
    $key: string.slice($key, 2, -1);
  }
  $value: _get-map-prop(variables.$sizes, $key);
  @return if($negative, string.unquote('-' + $value), $value);
}

@function z($key) {
  @return _get-map-prop(variables.$z-layers, $key);
}

@function font-size($key: 'n') {
  @if ($key == 'display') {
    @warn 'Display key is deprecated';
  }
  @return _get-map-prop(variables.$font-sizes, $key);
}

@function line-height($key: 'm') {
  @return _get-map-prop(variables.$line-height, $key);
}

@function font-weight($key: 'normal') {
  @return _get-map-prop(variables.$font-weight, $key);
}

@function icon-font-size($size) {
  @return map.get(variables.$icon-font-sizes, $size);
}

@function get-color($variant, $getValueOnly: false, $map: colors.$kirby-colors) {
  $value: _get-map-prop($map, $variant);
  @if $getValueOnly == true {
    @return $value;
  } @else {
    @return string.unquote('var(--kirby-' + $variant + ')');
  }
}

@function get-text-color($variant) {
  $value: _get-map-prop(colors.$text-colors, $variant);
  @return string.unquote('var(--kirby-text-color-' + $variant + ')');
}

@function get-elevation($value) {
  @return map.get(variables.$elevations, $value);
}

@function get-transition-duration($value) {
  @return map.get(variables.$transition-durations, $value);
}

@function get-transition-easing($value) {
  @return map.get(variables.$transition-easings, $value);
}

@function get-shadow-size($elevation) {
  $shadow-size: 0;
  $shadow-list: map.get(variables.$elevations, $elevation);
  @each $shadow in $shadow-list {
    $offset-x: math.abs(_get-shadow-value($shadow, 'offset-x'));
    $offset-y: math.abs(_get-shadow-value($shadow, 'offset-y'));
    $blur-radius: _get-shadow-value($shadow, 'blur-radius');
    $spread-radius: _get-shadow-value($shadow, 'spread-radius');
    $current-shadow-size: math.max($offset-x, $offset-y) + $blur-radius + $spread-radius;
    $shadow-size: math.max($shadow-size, $current-shadow-size);
  }
  @return $shadow-size;
}

@function _get-shadow-value($shadow, $valuekey) {
  $shadow-value-map: (
    'offset-x': 1,
    'offset-y': 2,
    'blur-radius': 3,
    'spread-radius': 4,
  );
  $value-index: map.get($shadow-value-map, $valuekey);
  @return list.nth($shadow, $value-index);
}

/**
 * Outputs all keys from map as CSS class selector list
 */
@function keys-to-classes($map) {
  $classes: ();
  @each $key in map.keys($map) {
    $classes: list.append($classes, '.#{$key}', $separator: comma);
  }
  @return $classes;
}

@mixin slotted($selectors...) {
  ::ng-deep > {
    #{$selectors} {
      @content;
    }
  }
}

@mixin theme-background($variant, $text-variant-override: null) {
  $background-color: null;
  $text-color: null;
  @if $variant == transparent {
    $background-color: transparent;
    $text-color: get-text-color('black');
  } @else {
    $background-color: get-color($variant);
    $text-color: get-color($variant + '-contrast');
  }
  @if ($text-variant-override != null) {
    $text-color: get-text-color($text-variant-override);
  }
  background-color: $background-color;
  color: $text-color;
}

/// Only apply the :hover selector and styles if pointer device can hover
/// (effectively desktop/mouse devices):
@mixin hover() {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

// Only apply the :focus selector and styles if pointer device can hover
// (effectively desktop/mouse devices):
@mixin focus() {
  @media (hover: hover) {
    &:focus {
      @content;
    }
  }
}

// Only apply the styles on touch devices
// No check for `hover: none`, as Samsung Galaxy will return false on `hover: none` media query
@mixin touch() {
  @media (pointer: coarse) {
    @content;
  }
}

// Only apply the styles on non touch devices
// (fine pointer and hover):
@mixin not-touch() {
  @media (hover: hover) and (pointer: fine) {
    @content;
  }
}

// Ensure minimum click area (default 44 x 44 px)
// Ignore rounded corners to ensure square click area
@mixin accessible-target-size($width: variables.$fat-finger-size, $height: $width) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    min-height: $height;
    min-width: $width;
    width: 100%;
    height: 100%;
    transform: translate(-50%, -50%);
    left: 50%;
    top: 50%;
  }
}

//TODO: should this be a module of its own?
@mixin rounded($border-radius: variables.$border-radius) {
  @include rounded-top($border-radius);
  @include rounded-bottom($border-radius);
}

@mixin rounded-top($border-radius: variables.$border-radius) {
  border-top-left-radius: $border-radius;
  border-top-right-radius: $border-radius;
  overflow: hidden;
}

@mixin rounded-bottom($border-radius: variables.$border-radius) {
  border-bottom-left-radius: $border-radius;
  border-bottom-right-radius: $border-radius;
  overflow: hidden;
}

@mixin shadow() {
  box-shadow: get-elevation(2);
}

// TODO: Very list-specific. Own module?
@mixin first-item-padding() {
  > ::ng-deep {
    :first-child {
      --item-padding-top: #{size('xxs')};
    }
  }
}

@mixin last-item-padding() {
  > ::ng-deep {
    :last-child {
      --item-padding-bottom: #{size('xxs')};
    }
  }
}

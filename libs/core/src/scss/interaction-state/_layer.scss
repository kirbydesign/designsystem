@use 'sass:math';
@use 'sass:meta';
@use '../utils';

@mixin setup-layer {
  $_z: utils.z('default');

  // layer 2
  --state-layer-opacity: 0;
  --state-layer-background-color: transparent;

  position: relative;

  .content {
    position: relative;
    z-index: $_z;
  }

  .state-layer {
    position: absolute;
    // TODO: Set inset to 0 (zero) if state layer should not cover border of parent
    inset: calc(var(--border-width, 0px) * -1); // negate border-width on parent
    overflow: hidden;
    pointer-events: none;
    border-radius: inherit;

    // Put state layer above content layer
    z-index: $_z + 1;

    &::before {
      content: '';
      position: absolute;
      pointer-events: none;
      inset: -50%;

      // layer 3
      opacity: var(--state-layer-opacity);
      background-color: var(--state-layer-background-color);

      // TODO: Extract transition into "interaction state trasition" mixin
      // transition-property: all;
      // transition-duration: 180ms;
      // transition-delay: 5ms;
      transition-property: all;
      transition-duration: utils.get-transition-duration('quick');
      transition-timing-function: utils.get-transition-easing('static');
    }
  }
}

@mixin apply-state($loudness: null, $flip: false) {
  $loudness-percent: utils.get-loudness($loudness);

  @if not(meta.type-of($loudness-percent) == number and math.unit($loudness-percent) == '%') {
    @error "$loudness-percent must be a percentage";
  }

  // layer 2
  --state-layer-opacity: #{$loudness-percent / 100%};

  // layer 2
  @if $flip {
    --state-layer-background-color: #fff;
  } @else {
    --state-layer-background-color: #000;
  }
  // TODO: Introduce "on color" concept (see Material) instead of white and black
}

@mixin extend-content {
  .content {
    @content;
  }
}

@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use '../utils';
@use '../themes/colors';

// TODO: Accessibility - Respect user preferences.
// Allow increased "loudness" depending on users' settings
$default-loudness: utils.get-loudness('loud');

@mixin apply-hover($background-color, $color, $property, $loudness: null) {
  @if meta.type-of($background-color) != color {
    @error "$background-color must be a valid CSS color value. See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value";
  }

  @if meta.type-of($color) != color {
    @error "$color must be a valid CSS color value. See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value";
  }

  // ---------------------------------------------------------------------------
  // Determine if lightness should increase or decrease (default is increase)
  //
  // When background color is transparent assume that the canvas underneath is
  // a light color. We cannot really determine if lightness should increase or
  // decrease, but this is a best guess. It's possible to work around by passing
  // a $background-color (or $color) parameter with a value other than
  // transparent.
  //
  // Sidenote: The color transparent is defined as black with 0% opacity, i.e.,
  // 100% transparent. Often declared as rgba(0, 0, 0, 0%) in browsers.
  // ---------------------------------------------------------------------------
  $relative-lightness: $default-loudness !default;

  @if $loudness {
    $relative-lightness: $loudness;
  }

  @if color.lightness($background-color) > color.lightness($color) {
    // Decrease relative lightness
    $relative-lightness: $relative-lightness * -1;
  }

  cursor: pointer;
  transition-property: background-color;
  transition-duration: utils.get-transition-duration('quick');
  transition-timing-function: utils.get-transition-easing('static');

  @include utils.hover() {
    #{$property}: #{color.scale($background-color, $lightness: $relative-lightness)};

    @content;
  }
}

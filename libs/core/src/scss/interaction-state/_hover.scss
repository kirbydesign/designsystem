@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use '../utils';
@use '../themes/colors';

// TODO: Create design tokens for "loudness"
$_default-loudness: 32%;

@mixin apply-hover($background-color, $color, $loudness: $_default-loudness, $property) {
  // TODO: Verify parameter validity

  // TODO: Default values for parameters ($color: kirby-black?)

  // Determine if lightness should increase or decrease
  $relative-lightness: $loudness !default;

  // TODO: Should it be possible to invert relative lightness through configuration?

  @debug '#{$background-color} lightness = #{color.lightness($background-color)}';
  // If $background-color is transparent this condition will not work.
  // The color transparent is defined as black with 100% transparency.
  // TODO: Determine how to handle transparent background
  @if color.lightness($background-color) > color.lightness($color) {
    $relative-lightness: $relative-lightness * -1;
  }

  @include utils.hover() {
    #{$property}: #{color.scale($background-color, $lightness: $relative-lightness)};

    // TODO: Transitions should be controlled by design tokens
    transition: background-color 200ms linear;

    @content;
  }
}

@use 'sass:color';
@use '../utils';

// Design token-ish
// positive = lighten
// negative = darken
$relative-lightness: -16%;

@mixin apply-background-color($background-color: transparent) {
  --h: #{color.hue($background-color)};
  --s: #{color.saturation($background-color)};
  --l-base: #{color.lightness($background-color)};

  --lighten: 0%;
  --darken: 0%;
  // TODO: Use a single custom property, e.g. "--relative-lightness"

  --l: calc(var(--l-base) + var(--lighten) - var(--darken));

  background-color: hsl(var(--h), var(--s), var(--l));
}

/**
 * Solution A - custom property
 *
 * Pros:
 *  + Simple and easy to control
 *  + ~~Does not require background color parameter~~
 *
 * Cons:
 *  - ~~Tighly couples two different mixins (apply-background and apply-hover)~~
 *  - ~~Requires background-color to be declared using HSL colors.~~
 */
@mixin apply-hover-use-custom-properties($background-color: transparent) {
  @include apply-background-color($background-color);

  &:hover {
    cursor: pointer;
    //--darken: #{$relative-lightness * -1};
    --lighten: #{$relative-lightness};
  }
}

/**
 * Solution B - color.scale()
 *
 * Pros:
 *  + ~~Does not require custom properties~~ Uses apply-background-color()
 *
 * Cons:
 *  - Background color must be supplied as parameter for mixin (maybe not a con anymore)
 */
@mixin apply-hover-use-sass-color-scale($background-color: transparent, $foreground-color: #000) {
  @include apply-background-color($background-color);

  color: $foreground-color;

  &:hover {
    cursor: pointer;
    background-color: color.scale($background-color, $lightness: $relative-lightness);
  }
}

// @mixin apply-hover-use-sass-color-mix(
//   $background-color: transparent,
//   $foreground-color: #000,
//   $mix: 50%
// ) {
//   @include apply-background-color($background-color);

//   color: $foreground-color;

//   &:hover {
//     cursor: pointer;
//     background-color: color.mix($background-color, $foreground-color, $mix);
//   }
// }

@mixin apply-hover() {
  @include utils.hover() {
    @content;

    cursor: pointer;
    // TODO: what else?
  }
}

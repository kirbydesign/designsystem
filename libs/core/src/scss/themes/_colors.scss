@use 'sass:color';
@use 'sass:map';

$brand-colors: (
  'primary': #00e89a,
  'secondary': #005c3c,
  'tertiary': #01352c,
) !default;
$decoration-colors-blue: (
  10: #abe3f2,
  20: #88d7ec,
  30: #66cbe7,
  40: #43c0e1,
  50: #21b4dc,
  60: #1c98ba,
  70: #177c98,
  80: #126076,
  90: #0d4454,
) !default;
$decoration-colors-green: (
  10: #b9efd2,
  20: #9de8c0,
  30: #80e1ae,
  40: #64db9b,
  50: #47d489,
  60: #3cb374,
  70: #31925f,
  80: #267149,
  90: #1b5134,
) !default;
$decoration-colors-purple: (
  10: #e4d4e7,
  20: #d9c3de,
  30: #ceb1d4,
  40: #c3a0cb,
  50: #b88ec1,
  60: #9b78a3,
  70: #7f6285,
  80: #624c67,
  90: #463649,
) !default;
$decoration-colors-red: (
  10: #f7bec0,
  20: #f3a4a6,
  30: #f0898c,
  40: #ec6f72,
  50: #e95458,
  60: #c5474a,
  70: #a13a3d,
  80: #7d2d2f,
  90: #592021,
) !default;
$decoration-colors-yellow: (
  10: #fde8ae,
  20: #fddf8d,
  30: #fcd66c,
  40: #fccc4b,
  50: #fbc32a,
  60: #d4a523,
  70: #ad871d,
  80: #866816,
  90: #5f4a10,
) !default;
$decoration-colors: (
  'blue': $decoration-colors-blue,
  'green': $decoration-colors-green,
  'purple': $decoration-colors-purple,
  'red': $decoration-colors-red,
  'yellow': $decoration-colors-yellow,
) !default;
$notification-colors: (
  'success': map.get($decoration-colors, 'green', 50),
  'warning': map.get($decoration-colors, 'yellow', 50),
  'danger': map.get($decoration-colors, 'red', 50),
) !default;
$system-colors: (
  'background-color': #f6f6f6,
  'white': #fff,
  'white-overlay': rgb(255 255 255 / 15%),
  'light': #f2f2f2,
  'semi-light': #ebebeb,
  'medium': #d1d1d1,
  'semi-dark': #8e8e8e,
  'dark': #353535,
  'dark-overlay': rgb(28 28 28 / 6%),
  'black': #1c1c1c,
) !default;
$text-colors: (
  'white': #fff,
  'semi-dark': #707070,
  'black': #1c1c1c,
  'danger': #ee0d0d,
  'positive': map.get($decoration-colors, 'green', 80),
  'negative': map.get($decoration-colors, 'red', 70),
) !default;
$focus-ring-color: rgb(77 144 254);

@function get-all-colors() {
  @return map.merge(map.merge($brand-colors, $notification-colors), $system-colors);
}

$_color-palette: get-all-colors();

// TODO Deprecated variable, used to generate colors in some components - don't use it anymore!
$main-colors: map.remove(
  $_color-palette,
  'background-color',
  'black',
  'white',
  'semi-light',
  'semi-dark'
);

@function _get-color-contrast($color) {
  $contrast-light: map.get($system-colors, 'white');
  $contrast-dark: map.get($system-colors, 'black');
  $color-brightness: _get-color-brightness($color);
  @if $color-brightness == 'dark' {
    @return $contrast-light;
  } @else {
    @return $contrast-dark;
  }
}

@function _get-color-brightness($color) {
  $red: color.red($color);
  $green: color.green($color);
  $blue: color.blue($color);

  /*
    Color brightness is determined by the following formula:
    ((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000
  */
  $color-brightness: (($red * 299) + ($green * 587) + ($blue * 114)) * 0.001;

  /* The range for color brightness difference is 125 */
  $color-range: 128;

  @if $color-brightness == 255 {
    @return 'white';
  } @else if $color-brightness >= $color-range {
    @return 'light';
  } @else {
    @return 'dark';
  }
}

@function _get-tint-value($color, $weight: 10) {
  @return color.mix(white, $color, $weight * 1%);
}

@function _get-shade-value($color, $weight: 12) {
  @return color.mix(black, $color, $weight * 1%);
}

@function _get-rgb-values($color) {
  @return color.red($color), color.green($color), color.blue($color);
}

@function generate-colors($colors: $_color-palette) {
  $color-list: ();
  @each $color-name, $color-value in $colors {
    $color-list: map.merge(
      (
        $color-name: $color-value,
        #{$color-name}-rgb: _get-rgb-values($color-value),
        #{$color-name}-contrast: _get-color-contrast($color-value),
        #{$color-name}-contrast-rgb: _get-rgb-values(_get-color-contrast($color-value)),
        #{$color-name}-shade: _get-shade-value($color-value),
        #{$color-name}-shade-rgb: _get-rgb-values(_get-shade-value($color-value)),
        #{$color-name}-tint: _get-tint-value($color-value),
        #{$color-name}-tint-rgb: _get-rgb-values(_get-tint-value($color-value)),
        #{$color-name}-color-brightness: _get-color-brightness($color-value),
      ),
      $color-list
    );
  }
  @return $color-list;
}

$kirby-colors: generate-colors();
$kirby-text-colors: generate-colors($text-colors);

@use '@kirbydesign/core/src/scss/utils';

// Global modal styling can be found at scss/base/_ionic.scss

@mixin contain-content() {
  padding-top: 0;
  position: relative;
  contain: inherit;
  min-height: min(var(--min-height), calc(var(--vh100) - var(--kirby-modal-padding-top, 0px)));

  ion-content {
    contain: content;
    max-height: calc(
      var(--vh100) - var(--kirby-modal-padding-top, 0px) - var(--header-height) -
        var(--footer-height)
    );

    &::part(scroll) {
      height: '100%';
      position: relative;
    }
  }

  &.drawer {
    ion-content::part(scroll) {
      transition: padding-bottom utils.$soft-keyboard-transition-leave;
    }

    &.keyboard-visible {
      ion-content::part(scroll) {
        transition: padding-bottom utils.$soft-keyboard-transition-enter;
      }
    }
  }
}

@mixin toolbar-phablet-or-bigger() {
  @include utils.media('>=medium') {
    $toolbar-padding: 20px;

    --padding-start: #{$toolbar-padding};
    --padding-end: #{$toolbar-padding};
    --padding-bottom: #{$toolbar-padding};
    --padding-top: #{$toolbar-padding};

    padding-inline: 0;
  }
}

ion-header {
  box-sizing: border-box;
  border-bottom: 1px solid var(--kirby-modal-background, utils.get-color('medium'));

  ion-toolbar {
    @include toolbar-phablet-or-bigger;

    --padding-start: #{utils.size('xxxs')};
    --padding-end: #{utils.size('xxxs')};
    --padding-bottom: #{utils.size('xxxs')};
    --padding-top: #{utils.size('xxxs')};
    --border-width: 0;
    --background: transparent;
    --color: var(--kirby-modal-color, #{utils.get-color('black')});

    button {
      color: var(--color);
    }
  }
}

:host {
  --vh100: var(--vh, 1vh) * 100; /// Fixes an issue with vh units on iOS Safari
  --header-height: 0px;
  --footer-height: 0px;

  &.drawer ion-header ion-toolbar {
    @include utils.media('<medium') {
      --padding-top: #{utils.size('xs')};

      padding-top: 0;
    }
  }
}

:host-context(ion-modal:not(.kirby-modal-full-height)) {
  @include utils.media('<medium') {
    @include contain-content;
  }
}

:host-context(ion-modal.kirby-drawer.interact-with-background) {
  @include contain-content;
}

// Ensure iOS safe-area padding-top on default/modal flavor
// when opened on presenting element (gets .modal-card class):
:host-context(ion-modal.modal-card:not(.kirby-drawer)) {
  ion-header ion-toolbar:first-of-type {
    padding-top: var(--kirby-safe-area-top, 0);

    @include toolbar-phablet-or-bigger;
  }
}

ion-title {
  box-sizing: border-box;
  padding-inline-start: calc(48px + var(--padding-start));
  padding-inline-end: calc(48px + var(--padding-end));
  font-size: utils.font-size('n');
  font-weight: utils.font-weight('bold');
}

ion-content {
  --background: transparent;
  --color: var(--kirby-modal-color, #{utils.get-color('black')});

  display: flex;
  flex-direction: column;

  @include utils.slotted('*') {
    box-sizing: border-box;
    display: block;
  }

  --padding-top: #{utils.size('m')};
  --padding-bottom: #{utils.size('m')};
  --padding-start: #{utils.size('s')};
  --padding-end: #{utils.size('s')};
}

// Ensure padding-rules are not merged with other media query,
// as this rule has to come AFTER the default mobile-first rule in order to override:

/* clean-css ignore:start */
@include utils.media('>=medium') {
  ion-content {
    --padding-start: #{utils.size('xxl')};
    --padding-end: #{utils.size('xxl')};
  }
}

:host(.collapsible-title) {
  ion-content {
    ion-header {
      --padding-top: 0px;

      // no border for header element when collapsible title is in the content area
      border: none;

      ion-toolbar:first-of-type {
        @include utils.media('>=medium') {
          --padding-start: #{utils.size('s')};
          --padding-end: #{utils.size('s')};
        }

        --padding-top: 0px;
        --padding-bottom: #{utils.size('l')};
        --padding-start: #{utils.size('xxs')};
        --padding-end: #{utils.size('xxs')};
      }
    }
  }
}

/* clean-css ignore:end */

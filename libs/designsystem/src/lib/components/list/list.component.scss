@import '../../scss/utils';

$divider-color: get-color('background-color');
$shadow: get-elevation(2);
$item-height: size('xxxl');

:host {
  display: block;
}

.list {
  box-shadow: $shadow;
  background: transparent;
  contain: inherit;
  padding: 0;
}

.viewport {
  overflow-y: auto;
}

.item-wrapper {
  min-height: #{map-get($item-heights, 'm')};
}

ion-list-header {
  background-color: get-color('white');
  border-bottom: 1px solid $divider-color;
  padding: 0;
  text-transform: inherit;
  letter-spacing: inherit;
  font-weight: inherit;
  font-size: inherit;
  min-height: 0;
  overflow: inherit;
}

ion-item {
  --background: #{get-color('white')};
  --background-activated: #{get-color('white-shade')};
  --background-hover: #{get-color('background-color')};
  --background-focused: #{get-color('background-color')};
  --inner-border-width: 0;
  --ion-safe-area-right: 0;
  --min-height: #{$item-height};
  --padding-bottom: #{size('xxs')};
  --padding-end: #{size('s')};
  --padding-start: #{size('s')};
  --padding-top: #{size('xxs')};
  display: flex;
  font-size: font-size('s');
  min-height: $item-height;
  overflow: visible;
  width: 100%;
}

ion-item-divider {
  font-weight: inherit;
}

ion-item-sliding {
  &.item-sliding-active-slide {
    // backface-visibility and transform, to fix clipping issue on iOS see https://stackoverflow.com/a/16681137 and https://github.com/kirbydesign/designsystem/issues/863
    backface-visibility: hidden;
    transform: translate3d(0, 0, 0);
  }

  $list-colors: ('light'); // add supported list item theme colors here
  @each $color-name, $color-value in $list-colors {
    &.#{$color-name} {
      --kirby-item-background: #{get-color($color-name)};
      --kirby-item-background-activated: #{get-color($color-name + '-shade')};
      --kirby-item-background-focused: #{get-color($color-name + '-shade')};
      --kirby-item-background-hover: #{get-color($color-name + '-tint')};
      ion-item {
        --background: #{get-color($color-name)};
        --color: #{get-color($color-name + '-contrast')};
        --background-activated: #{get-color($color-name + '-shade')};
        --background-focused: #{get-color($color-name + '-shade')};
        --background-hover: #{get-color($color-name + '-tint')};
      }
    }
  }
}

ion-item-group {
  margin-bottom: size('m');

  &:last-of-type {
    margin-bottom: 0;
  }
}

ion-item-divider {
  --inner-padding-end: 0;
  --color: unset;
  background-color: transparent;
  border-color: transparent;
  min-height: 0;
  padding: 0 size('s') size('xxs') size('s');
}

.footer {
  background-color: get-color('white');
  border-top: 1px solid $divider-color;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}

.no-more-items,
.loading {
  width: 100%;
  padding: size('m') 0;
  text-align: center;
}

.swipe-action {
  display: flex;
  color: #{get-color('black')};
  background-color: transparent;

  @each $color-name, $color-value in $main-colors {
    .#{$color-name} {
      background-color: #{get-color($color-name)};
      color: #{get-color($color-name + '-contrast')};
    }
  }

  ion-item-option {
    height: 100%;
    display: inline-block;
    text-align: center;
  }

  .item-content {
    display: inline-grid;
    min-width: 70px;
    flex-direction: column;

    ion-label {
      --background: unset;
      --color: unset;
    }
  }
}

ion-item-options[side='end'] {
  border-bottom-width: 0;
}

:host-context(.has-sections) {
  .list {
    box-shadow: none;
  }

  .list-items {
    box-shadow: $shadow;
    border-radius: $border-radius;
  }

  .virtual-group {
    margin-top: size('m');
  }

  .section-header {
    overflow: hidden;
  }

  .footer {
    background-color: transparent;
    border-top: none;
  }

  ion-list-header {
    background-color: transparent;
    border-bottom: none;
  }
}

:host-context(.shape-rounded) {
  .list,
  .list-items {
    border-radius: $border-radius;
  }

  ion-item.first,
  ion-item-sliding.first,
  ion-list-header {
    border-top-left-radius: $border-radius;
    border-top-right-radius: $border-radius;
    -webkit-mask-image: -webkit-radial-gradient(
      white,
      black
    ); // Solves issues with round borders at iOS in certain scenarios
  }

  ion-item-sliding > ion-item,
  &:not(.has-sections) .has-header ion-item,
  &:not(.has-sections) .has-header ion-item-sliding {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  ion-item.last,
  ion-item-sliding.last,
  .footer {
    border-bottom-left-radius: $border-radius;
    border-bottom-right-radius: $border-radius;
    -webkit-mask-image: -webkit-radial-gradient(
      white,
      black
    ); // Solves issues with round borders at iOS in certain scenarios
  }

  ion-item-sliding > ion-item,
  &:not(.has-sections) .has-footer ion-item,
  &:not(.has-sections) .has-footer ion-item-sliding {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
}

:host-context(.shape-none) {
  .list,
  .list-items {
    box-shadow: none;
    border-radius: unset;
  }

  .list {
    ion-item,
    ion-item-sliding {
      --padding-start: 0;
      --padding-end: 0;
      --padding-top: 0;
      --padding-bottom: 0;
      --inner-padding-start: 0;
      --inner-padding-end: 0;
      --inner-padding-top: 0;
      --inner-padding-bottom: 0;
      --background: none;
      --background-activated: none;
      --background-hover: none;
      --background-focused: none;
      overflow: visible;
    }
  }
}

:host-context(.item-spacing) {
  .list {
    ion-item,
    ion-item-sliding {
      margin-bottom: size('s');

      & > ion-item,
      &:last-child {
        margin-bottom: 0;
      }
    }
  }
}

@use "sass:map";
@use '~@kirbydesign/core/src/scss/utils';

$radio-icon-padding: utils.size('xxxxs');
$radio-icon-size: utils.size('m');
$radio-icon-mark-size: 60%;
$spacing-to-edge: map.get(utils.$checkbox-radio-spacing, 'to-edge');
$spacing-to-label: map.get(utils.$checkbox-radio-spacing, 'to-label');
$default-checkbox-radio-size: map.get(utils.$checkbox-radio-sizes, 'md');

@function getVerticalPadding($target-height) {
  @return ($target-height - $radio-icon-size) / 2;
}

:host {
  display: inline-block;

  &.has-label {
    display: block;
    line-height: utils.line-height('n');
    white-space: pre-line;

    div.wrapper {
      position: relative;
      display: inline-flex;
      align-items: flex-start;
      vertical-align: top;
      padding: getVerticalPadding($default-checkbox-radio-size) 0;
      padding-right: $spacing-to-label; // Ensure same padding on right side of label
    }

    @each $size, $height in utils.$checkbox-radio-sizes {
      :host-context(.radio-#{$size}),
      &.#{$size} {
        .wrapper {
          $verticalPadding: getVerticalPadding($height);
          padding-top: $verticalPadding;
          padding-bottom: $verticalPadding;
        }
      }
    }

    ion-radio {
      position: static;
      margin-left: $spacing-to-edge;
      margin-right: $spacing-to-label;
    }
  }

  &[disabled] {
    color: #{utils.get-text-color('semi-dark')};
    ion-radio {
      opacity: 1; // Reset Ionic disabled style
      --color: #{utils.get-color('medium')};
      --color-checked: #{utils.get-color('medium')};
      &::part(container) {
        background-color: utils.get-color('semi-light');
      }
    }
  }
}

ion-radio {
  min-height: $radio-icon-size;
  min-width: $radio-icon-size;
  padding: $radio-icon-padding;
  box-sizing: border-box; // Ensure padding is not added to radio width/height
  --border-width: 1px;
  --color: #{utils.get-color('semi-dark')};
  --color-checked: #{utils.get-color('success')};

  &::part(container) {
    background-color: utils.get-color('white');
  }

  &::part(mark) {
    width: $radio-icon-mark-size;
    height: $radio-icon-mark-size;
  }

  &:active {
    --color: transparent;

    &::part(container) {
      background-color: utils.get-color('white-shade');
    }
  }

  :host-context(kirby-radio-group.error),
  :host-context(kirby-radio-group.ng-touched.ng-invalid) {
    ion-radio,
    ion-radio:active {
      --color: #{utils.get-color('danger')};
    }
  }

  // Only apply focus ring if pointer device can hover
  // (effectively desktop/mouse devices):
  @include utils.focus() {
    &::part(container) {
      // Apply focus ring through box-shadow to keep circle shape and default border:
      box-shadow: 0 0 0 1px #{utils.get-color('background-color')},
        0 0 0 3px #{utils.$focus-ring-color};
    }
  }

  &.radio-checked {
    --border-width: 0px;

    &:not(:focus):not(.radio-disabled) {
      &::part(container) {
        box-shadow: utils.get-elevation(2);
      }
    }
  }
}

:host-context(kirby-item) {
  z-index: utils.z('default'); // Makes whole kirby-item clickable above item-inner.

  ion-radio {
    margin: 0; // Reset Ionic in-item margins
  }

  &[slot='start'] {
    margin-inline-end: $spacing-to-label;
  }
}

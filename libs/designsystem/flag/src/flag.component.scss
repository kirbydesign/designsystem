@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use '@kirbydesign/core/src/scss/utils';

// returns the total target height including padding and borders
@function _calculate-line-height(
  $border: 1px,
  $padding: utils.size('xxxxs'),
  $fontSize: utils.font-size('n'),
  $targetHeight
) {
  // line-height should be unitless; Sass seems to take care of it.
  @return math.div($targetHeight - 2 * ($padding + $border), $fontSize);
}

:host {
  display: inline-block;
  background-color: var(--kirby-flag-background-color, transparent);
  color: var(--kirby-flag-color, utils.get-color('white-contrast'));
  border: 1px solid var(--kirby-flag-border-color, utils.get-color('medium'));
  border-radius: utils.size('xxxs');
  font-size: utils.font-size('n');
  padding: utils.size('xxxxs') utils.size('xxs');
  font-weight: utils.font-weight('medium');
  line-height: _calculate-line-height($targetHeight: 28px, $fontSize: utils.font-size('n'));

  &.sm {
    font-size: utils.font-size('s');
    line-height: _calculate-line-height($targetHeight: 24px, $fontSize: utils.font-size('s'));
  }

  &.xs {
    font-size: utils.font-size('xs');
    line-height: _calculate-line-height($targetHeight: 20px, $fontSize: utils.font-size('xs'));
    padding-left: utils.size('xxxs');
    padding-right: utils.size('xxxs');
  }
}

$_flag-notification-colors-map: (
  'success': (
    'green',
    30,
  ),
  'warning': (
    'yellow',
    30,
  ),
  'danger': (
    'red',
    30,
  ),
  'semi-light': 'semi-light',
);

@each $name, $variant_shade in $_flag-notification-colors-map {
  :host(.#{$name}) {
    @if meta.type_of($variant_shade) == list {
      --kirby-flag-background-color: #{utils.get-decoration-color($variant_shade...)};
    } @else {
      --kirby-flag-background-color: #{utils.get-color($variant_shade)};
    }

    --kirby-flag-color: #{utils.get-color('black')};
    --kirby-flag-border-color: var(--kirby-flag-background-color);
  }
}

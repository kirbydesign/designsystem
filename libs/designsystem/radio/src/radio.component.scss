@use 'sass:color';
@use 'sass:map';
@use '@kirbydesign/core/src/scss/interaction-state';
@use '@kirbydesign/core/src/scss/utils';

$radio-icon-padding: utils.size('xxxxs');
$radio-icon-size: utils.size('m');
$radio-icon-mark-size: 60%;
$spacing-to-edge: map.get(utils.$checkbox-radio-spacing, 'to-edge');
$spacing-to-label: map.get(utils.$checkbox-radio-spacing, 'to-label');
$default-checkbox-radio-size: map.get(utils.$checkbox-radio-sizes, 'md');

@function get-vertical-padding($target-height) {
  @return ($target-height - $radio-icon-size) * 0.5;
}

:host {
  display: inline-block;

  &.has-label {
    display: block;

    @each $size, $height in utils.$checkbox-radio-sizes {
      &.#{$size} {
        // TODO: Refactor: Move $vertical-padding declaration here
        // $vertical-padding: get-vertical-padding($height);

        ion-radio::part(label) {
          // TODO: Refactor: Move $vertical-padding declaration out of scope of this selector => reuse
          $vertical-padding: get-vertical-padding($height);

          padding-top: $vertical-padding;
          padding-bottom: $vertical-padding;
        }

        // TODO: Enable this block to handle sizes - note: may depend on kirby-item (ion-item --min-height)
        // FIXME: Try to explain what is going on here
        // ion-radio.in-item:not(.legacy-radio)::part(label) {
        //   // TODO: Refactor: Move $vertical-padding declaration out of scope of this selector => reuse
        //   $vertical-padding: get-vertical-padding($height);

        //   padding-block-start: calc(#{$vertical-padding} - 1px);
        //   padding-block-end: calc(#{$vertical-padding} - 3px);
        // }
      }
    }
  }

  &[disabled] {
    color: #{utils.get-text-color('semi-dark')};

    ion-radio {
      --color: #{utils.get-color('medium')};
      --color-checked: #{utils.get-color('medium')};

      &::part(container) {
        background-color: utils.get-color('semi-light');
      }

      &::part(label-text-wrapper) {
        opacity: 1; // Reset Ionic disabled style
      }

      &::part(native-wrapper) {
        opacity: 1; // Reset Ionic disabled style
      }
    }
  }
}

ion-radio {
  @include interaction-state.apply-focus-part($part: 'container');

  box-sizing: border-box; // Ensure padding is not added to radio width/height

  --border-width: 1px;
  --color: #{utils.get-color('semi-dark')};
  --color-checked: #{utils.get-color('success')};

  @include interaction-state.apply-hover {
    &::part(container) {
      background-color: interaction-state.get-state-color('white', 'xxs');
    }
  }
  @include interaction-state.apply-active {
    --color: transparent;
    --color-checked: #{interaction-state.get-state-color('success')};

    &::part(container) {
      background-color: interaction-state.get-state-color('white', 'xs');
    }
  }

  &::part(container) {
    transition: interaction-state.transition();
    transition-property: background-color;
    background-color: utils.get-color('white');
    margin: utils.size('xxxxs');
  }

  &::part(mark) {
    width: $radio-icon-mark-size;
    height: $radio-icon-mark-size;
  }

  &::part(label) {
    align-items: start;
    padding-left: $spacing-to-edge;
    padding-right: $spacing-to-label;
    line-height: utils.line-height('n');
  }

  &::part(label-text-wrapper) {
    margin-inline: $spacing-to-label 0;
  }

  // Override (both Kirby and Ionic) styles for Radio in Item
  // FIXME: Increase specificity without reaching for `!important` by duplicating `.in-item` in selector
  &.in-item.in-item:not(.legacy-radio) {
    &::part(label) {
      padding-inline-start: 0;

      // FIXME: If using slotted content
      // margin-block-start: utils.size('xxxs');

      // FIXME: If using text-property
      // margin-block: -1px -3px;

      // FIXME: alternative: override padding-block (declared in line ~28) - This requires increased specifity!
      // TODO: Make sure sizes still work
      // TODO: Consider moving this solution up to the loop in line ~23-33
      // TODO: Explain or fix using magic numbers
      padding-block: 15px 13px; // avoid !important
    }

    &::part(label-text-wrapper) {
      margin-block: 0;
      margin-inline-start: utils.size('xxs');
    }
  }

  :host-context(kirby-radio-group.error),
  :host-context(kirby-radio-group.ng-touched.ng-invalid) {
    ion-radio,
    ion-radio:active {
      --color: #{utils.get-color('danger')};
    }
  }

  &.radio-checked {
    --border-width: 0px;

    &:not(:focus, .radio-disabled) {
      &::part(container) {
        box-shadow: utils.get-elevation(4);
      }
    }
  }

  span {
    white-space: pre-line;
  }
}

:host-context(kirby-item) {
  z-index: utils.z('default'); // Makes whole kirby-item clickable above item-inner.

  ion-radio {
    margin: 0; // Reset Ionic in-item margins
  }

  &[slot='start'] {
    margin-inline-end: $spacing-to-label;
  }
}
